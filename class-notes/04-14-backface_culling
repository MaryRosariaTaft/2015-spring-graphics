backface culling

removes backface surfaces but does not deal with overlapping frontfaces

compare surface normals to "view vector" (surface normal to computer screen except pointing into the screen oh this is terrible wording)

surface is visible if angle btwn surface normal and view vector is obtuse (again, since view vector points into the screen, not out--direction matter!--oh, my wording, my heart, it aches)

to find surface normal:
- define/whatever the surface using two vectors *on* that surface both pointing outwards from a single point (or in)
- let P_0 be common point (tail) and P_1 and P_2 be the separate ones (tips--?)
- vector from P_0 to P_1 = <(x_1-x_0), (y_1-y_0), (z_1-z_0)> = <ax, ay, az>
- vector from P_0 to P_2 = <(x_2-x_0), (y_2-y_0), (z_2-z_0)> = <bx, by, bz>
- surface normal = cross product of the above = <ay*bz-az*by, az*bx-ax*bz, ax*by-ay*bx>

*positive z-cor - INTO the screen; negative z-cor - OUT OF the screen

to find angle btwn suface normal (above) and view vector (preestablished as <0, 0, -1>):
- find dot product (magnitude*cos)
  - if cos < 0, angle is obtuse
  - > 0, acute
*how to find said dot product:
 - let n be the surface normal and v be the view vector
   - dot product: m*cos(theta) = n_x*v_x + n_y*v_y + n_z*v_z

to make the above useful:
- if theta is obtuse, draw the triangle
- otherwise, don't (effectively hiding it)